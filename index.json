[{"categories":null,"contents":"Amazing tools for developers to that might come in handy and increase productivity when working with images.\n  removebg If you want to remove the background of any photo just select your image and download the image with the background removed. It\u0026rsquo;s fast and really great.\n  Profile Pic Maker You can use it to generate professional profile pics from any photo. It uses background removal AI, beautifies your photo, and you can also choose from different backgrounds for your image. It generates dozens of profile pic variations automatically.   ","date":"Feb 03","permalink":"https://dev.portalsindex.xyz/posts/2-amazing-web-apps-for-developers-33i2/","tags":["webdev"," tooling"],"title":"2 amazing web apps for developers "},{"categories":null,"contents":"Hi all!\nWelcome to the first edition of {Tech \u0026amp; Dev}.\nAt the beginning of this year, I made a goal for myself to be more consistent with creating things — whether it be through my writing or making mini-apps on the side to learn new things and keep up with the tech.\nThe point is that I make and keep making — come rain, shine, lockdowns, homeschooling, and whatever life will throw at me in 2022. This newsletter is part of the consistency and creation pledge.\nWithout further ado, let’s dive into this week’s stories.\n   \u0026lt;strong\u0026gt;1. What tech companies are really paying their developers\u0026lt;/strong\u0026gt;  Asking for money is a touchy business. We don’t want to lose out on a job because we’re asking too much. We also don’t want to be underpaid either. Sometimes, it’s hard to know exactly where we’re standing when it comes to paychecks and how much software developers should be paid.\nSure, there’s the old method of asking what you think you’re worth — but then we run the risk of undervaluing our skills because we don’t know what the market rates are.\nSo I went digging and here’s what I found.\n Read it here 👉What Tech Companies Are Really Paying Their Developers     \u0026lt;strong\u0026gt;2. How to use Cloudflare tunnels for free\u0026lt;/strong\u0026gt;  You’ve built an app but it still lives on your localhost:3000. You want to share a preview of this app with your friends, boss, or client without the need to deploy it. Or you might just want to test a service worker. Whatever the case, something or someone needs access to your localhost.\nThis is where tunnels come in. Cloudflare has a free tunnel service that you can use. I’ve tested it. It’s seamless to start using and less annoying than ngrok.\n Read it here 👉 How to use Cloudflare tunnels for free     \u0026lt;strong\u0026gt;3. Why custom react hooks could destroy your app performance\u0026lt;/strong\u0026gt;  For performance-sensitive apps custom React hooks can very easily turn into the biggest performance killer, if not written and used very carefully. This story isn’t about how to build and use hooks — rather, it’s about their performance implication for complicated apps.\n Read it here 👉Why custom react hooks could destroy your app performance     \u0026lt;strong\u0026gt;4. A quick field guide to using Remix with Apollo GraphQL\u0026lt;/strong\u0026gt;  Remix is the newest and hottest full-stack React-based framework on the block. Newly minted and open-sourced in November, the framework closed off 2021 with+10k stars on GitHub. What makes Remix a different kind of React framework is that it’s primarily a server-side rendered framework. On the first page load the page is pre-rendered on the server, which ensures a super-fast load time.\nBut how does it work? Here is a quick tutorial on how to use Remix with Apollo GraphQL.\n Read it here 👉A quick field guide to using Remix with Apollo GraphQL     \u0026lt;strong\u0026gt;5. Using Sequelize ORM with Node.js \u0026amp;amp; MySQL\u0026lt;/strong\u0026gt;  ORMs help developers to write complicated queries quickly and make it easier to update and reuse the code. However, getting started with ORMs can be challenging due to the learning curve. So, here is a quick tutorial on how to set up Sequelize ORM with Node.js and MySQL.\n Read it here 👉Using Sequelize ORM with Node.js \u0026amp; MySQL     \u0026lt;strong\u0026gt;6. Wanna Upgrade your Data Science Game? Think Like an Engineer\u0026lt;/strong\u0026gt;  As a society, we’re drawn to stories of overnight success and of mythical genius that achieves the impossible by building something from nothing. In reality, though, success is more often the result of slow, consistent experimentation and tinkering.\nHere is a piece about creating an environment that supports the iterative development of ideas and validates them in phases.\n Read it here 👉Wanna Upgrade Your Data Science Game? Think Like an Engineer.     \u0026lt;strong\u0026gt;7. Serverless — an overview starter guide\u0026lt;/strong\u0026gt;  Serverless is not new. Up until the mid-2000s, servers were giant rooms that lived on-premise to provide businesses with the infrastructure they needed to run their centralized software systems. Then along came cloud computing, along with ideas like elastic load balancing, on-demand self-service, resource pooling, and infrastructure as a service.\nHere is a short history with a list of serverless frameworks you can use for your next project.\n Read it here 👉Serverless — an overview starter guide     \u0026lt;strong\u0026gt;8. Is Angular Dead in 2022?\u0026lt;/strong\u0026gt;  In case you’re unaware, Google has had an interesting track record in the Framework category. So, what’s going on with Angular? Here is a piece that outlines Angular’s potential future fate.\n Read it here 👉Is Angular Dead in 2022?     \u0026lt;strong\u0026gt;9. How to use Firebase Analytics with Angular\u0026lt;/strong\u0026gt;  Firebase Analytics is one of the most exciting features of Firebase since it provides an application-focused analytics dashboard with countless features. Here is a quick tutorial on setting up Firebase Analytics with Angular.\n Read it here 👉How to Use Firebase Analytics with Angular     \u0026lt;strong\u0026gt;10. Flutter vs. React Native\u0026lt;/strong\u0026gt;  Making the same mobile phone app twice is not the best use of a developer’s time. That’s two different platforms to maintain and manage. By requirement, Apple uses Swift. On the other side of the ring sits Android and its Java-based compilers.\nThis is where ‘bridging’ frameworks and libraries come in. Flutter and React Native are two popular bridging solutions that make it possible to code once and use multiple platforms. Flutter assumed that you build an app once, and it will work on any screen. React Native is a flavor of React that leverages the current implementation of its JavaScript UI library and makes it possible to run on any mobile device. On the surface, these features sound great — but with every perk, there is a quirk.\n Read it here 👉Flutter vs. React Native  And that\u0026rsquo;s it for this week! Stay tuned for next week\u0026rsquo;s tech and dev finds.\n","date":"Feb 01","permalink":"https://dev.portalsindex.xyz/posts/001-the-week-in-stories-tech-salaries-freebies-and-dev-things-2bmi/","tags":["javascript"," webdev"," programming"," codenewbie"],"title":"001 The Week In Stories  Tech Salaries Freebies and Dev Things"},{"categories":null,"contents":"In third part of this ethers.js tutorial, we will use ethers.js to interact with smart contract.\nWhat we do here is a little beyond the scope of learning ethers.js:\n Write a ERC20 token smart contract with OpenZeppelin Deploy the smart contract to Hardhat local testnet Interact with smart contract using Ethers.js      Task 1: Write ERC20 token smart contract  We will write an ERC20 token smart contract using the verified and popular solidity token library OpenZeppelin.\n   Task 1.1 Install OpenZeppelin  In the hardhat project directory, install OpenZepplin:\nyarn add @openzeppelin/contracts    Task 1.2 Write smart contract in Solidity  There is a \u0026ldquo;Greeter.sol\u0026rdquo; and related test script \u0026ldquo;test/index.ts\u0026rdquo; and deploy script \u0026ldquo;scripts/deploy.ts\u0026rdquo; in the project. We will leave them there.\nAdd \u0026ldquo;contracts/classtoken.sol\u0026rdquo;\n1 2 3 4 5 6 7 8 9 10  //SPDX-License-Identifier: Unlicense pragma solidity ^0.8.0; import \u0026#34;@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\u0026#34;; contract ClassToken is ERC20PresetMinterPauser { constructor(uint256 initialSupply) ERC20PresetMinterPauser(\u0026#34;ClassToken\u0026#34;, \u0026#34;CLT\u0026#34;) { _mint(msg.sender, initialSupply); } }   We create an ERC20 token smart contract which inherits ERC20PresetMinterPauser of OpenZeppelin. The token name is \u0026ldquo;ClassToken\u0026rdquo;, symbol is \u0026ldquo;CLT\u0026rdquo;.\nInitial supply of this token will be set in deployment script. Initial supply of CLT will be sent to (mint to) deployer\u0026rsquo;s address.\nCompile smart contract by running:\nyarn hardhat compile    Task 1.3 Write Unit Test for smart contract  Unit test of smart contract is a must. We should cover smart contract with unit test as much as possible. The following script is included here to illustrate that we can\u0026rsquo;t skip this step.\nAdd \u0026ldquo;test/ClassToken.ts\u0026rdquo;:\n1 2 3 4 5 6 7 8 9 10 11 12 13  import { expect } from \u0026#34;chai\u0026#34;; import { ethers } from \u0026#34;hardhat\u0026#34;; describe(\u0026#34;ClassToken\u0026#34;, function () { it(\u0026#34;Should have the correct initial supply\u0026#34;, async function () { const initialSupply = ethers.utils.parseEther(\u0026#39;10000\u0026#39;) const ClassToken = await ethers.getContractFactory(\u0026#34;ClassToken\u0026#34;); const token = await ClassToken.deploy(initialSupply); await token.deployed(); expect(await token.totalSupply()).to.equal(initialSupply); }); });   Run test:\nyarn hardhat test Unit test passed. We will try to deploy it to a local testnet.\n    Task 2: Deploy smart contract to local testnet  We will deploy smart contract both to in-process and stand-alone local testnet to display usage and difference between these two.\n   Task 2.1: Write deployment script  Add \u0026ldquo;scripts/deploy_classtoken.ts\u0026rdquo;:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { ethers } from \u0026#34;hardhat\u0026#34;; async function main() { const initialSupply = ethers.utils.parseEther(\u0026#39;10000\u0026#39;) const ClassToken = await ethers.getContractFactory(\u0026#34;ClassToken\u0026#34;); const token = await ClassToken.deploy(initialSupply); await token.deployed(); console.log(\u0026#34;ClassToken deployed to:\u0026#34;, token.address); } main().catch((error) =\u0026gt; { console.error(error); process.exitCode = 1; });   The intialSupply is set to be 10000.0 CLS.\n   2.2 deploy on in-process local testnet.  yarn hardhat run scripts/deploy_classtoken.ts //ClassToken deployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3 If you run the script again, you will find the smart contract is always deployed to the same address as in-process is new every time.\n   2.3 Run a stand-alone local testnet  Run a stand-alone local testnet at another terminal:\nyarn hardhat node    2.4 Deploy ClassToken to stand-alone local testnet  Deploy smart contract:\nyarn hardhat run scripts/deploy_classtoken.ts --network localhost //ClassToken deployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3 If you run the script again, you will find the smart contract is deployed to a new address:\nyarn hardhat run scripts/deploy_classtoken.ts --network localhost //ClassToken deployed to: 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 We will use the smart contract instance at: 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\n    Task 3: Interact with smart contract from console     Task 3.1 Get smart contract instance  Run console connecting to stand-alone local testnet:\nyarn hardhat console --network localhost Get Smart contract:\n1 2  const address = \u0026#39;0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\u0026#39;; const token = await ethers.getContractAt(\u0026#34;ClassToken\u0026#34;, address);      Task 3.2 Get to know properties smart contract  Docs can be found at: https://docs.ethers.io/v5/api/contract/contract/#Contract--properties\n1 2 3 4 5 6  token.interaface token.provider token.signer token.signer.address //\u0026#39;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\u0026#39;      Task 3.3 Get data from smart contract  1 2 3 4 5 6 7 8 9  parseEther =ethers.utils.parseEther formatEther = ethers.utils.formatEther await token.totalSupply().then((r)=\u0026gt;console.log(formatEther(r))) //10000.0  await token.symbol() //CLT await token.name() //ClassToken      Task 3.4 Token balance of deployer  1 2 3  deployer=\u0026#39;0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\u0026#39; await token.balanceOf(deployer).then((r)=\u0026gt;console.log(formatEther(r))) //10000.0      Task 3.5 Transfer Token from deployer to other  We will transfer CLS token by calling transfer() of ERC20 standard. You can also send ERC20 token using MeteMask in two steps: 1) add token using token address(contract address), 2) send some amount of it to other\u0026rsquo;s address.\n1 2 3 4 5  to_address=\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39; await token.transfer(to_address,parseEther(\u0026#39;1000\u0026#39;)) await token.balanceOf(to_address).then((r)=\u0026gt;console.log(formatEther(r))) //1000.0   Now, only user with the correct private key of the address can use this token in address 0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1.\n    Task 4: Connect wallet and transfer token  Note: you can refer to the second part of this tutorial \u0026ldquo;Understanding Blockchain with ethers.js: 4 Tasks of wallet\u0026rdquo; to know more about wallet usage.\n   Task 4.1 Create wallet  1 2 3 4 5 6  //account not in hardhat default privateKey=\u0026#39;0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d\u0026#39; wallet = new ethers.Wallet(privateKey) wallet.address //\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39;      Task 4.2 Send ethers from account 0 for gas fee usage  If adress 0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1 has no test ETH, it will not have the ability to send transactions.\nDo remember to send some ETH to this address for gas usage. If it has test ETH, you can skip this step Task 4.2.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  signer = await ethers.provider.getSigner() send_address = await signer.getAddress() to_address = wallet.address nonce = await signer.getTransactionCount() gas_price = await signer.getGasPrice() gas_limit = ethers.utils.hexlify(21000) value = ethers.utils.parseUnits(\u0026#39;1.0\u0026#39;) tx = { from: send_address, to: to_address, value: value, nonce: nonce, gasLimit: gas_limit, gasPrice: gas_price, } await signer.sendTransaction(tx) await ethers.provider.getBalance(wallet.address).then(result=\u0026gt;ethers.utils.formatEther(result)) //\u0026#39;1.0\u0026#39;      Task 4.4 Connect wallet to provider  Connect wallet to provider\n1 2 3  walletsigner = wallet.connect(ethers.provider) walletsigner.address //still be the one      Task 4.5 Set walletsigner as signer of ClassToken  1 2 3  newtokeninstance = await token.connect(walletsigner) newtokeninstance.signer.address //\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39;      Task 4.6 send ClassToken from this address  1 2  deployer=\u0026#39;0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\u0026#39; await newtokeninstance.transfer(deployer,parseEther(\u0026#39;66\u0026#39;))   Do read the returned receipt of this contract method call.\nLet\u0026rsquo;s check whether we get the correct result:\n1 2 3 4  await token.balanceOf(deployer).then((r)=\u0026gt;console.log(formatEther(r))) //9066.0 await token.balanceOf(to_address).then((r)=\u0026gt;console.log(formatEther(r))) //934.0   After going through 12 tasks in this tutorial, you can begin to use Ethers.js in Web3 development. Ethers.js, as well as web3.js, is very important as it stands at the overlapped space between blockchain and web App.\n If you find this note useful, please follow my twitter @fjun99.\n ","date":"Jan 31","permalink":"https://dev.portalsindex.xyz/posts/03-understanding-blockchain-with-ethersjs-4-tasks-of-interacting-with-smart-contract-3ef6/","tags":["blockchain"," web3"," ethersjs"," dapp"],"title":"03 Understanding Blockchain with ethersjs 4 Tasks of interacting with smart contract"},{"categories":null,"contents":"Ethers.js provides functions to deal with Ethereum blockchain wallet. You can find Ethers.js documents about Wallet here.\nGet a better understanding with the following tasks:\n    Task 1: Create wallet from mnemonic and privateKey     Task 1.1 Create wallet from mnemonic  1 2 3 4 5 6  mnemonic=\u0026#39;myth like bonus scare over problem client lizard pioneer submit female collect\u0026#39; //check whether it is valid mnemonic ethers.utils.isValidMnemonic(mnemonic) wallet = ethers.Wallet.fromMnemonic(mnemonic)   Note: You should never write your mnemonic and privateKey in your script like this, it\u0026rsquo;s dangerous.\nThe mnemonic and privateKey used here are the default ones used in Ganache-cli and are public.\n   Task 1.2 Address, Public key and Private key  1 2 3 4 5 6 7 8  wallet.address //\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39;  wallet.privateKey \u0026#39;0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d\u0026#39; wallet.publicKey \u0026#39;0x04e68acfc0253a10620dff706b0a1b1f1f5833ea3beb3bde2250d5f271f3563606672ebc45e0b7ea2e816ecb70ca03137b1c9476eec63d4632e990020b7b6fba39\u0026#39;   This is the address with path \u0026ldquo;m/44'/60'/0'/0/0\u0026rdquo;.\nWe can also get mnemonic of wallet if it is created from mnemonic.\n1 2 3 4 5 6  wallet.mnemonic { phrase: \u0026#39;myth like bonus scare over problem client lizard pioneer submit female collect\u0026#39;, path: \u0026#34;m/44\u0026#39;/60\u0026#39;/0\u0026#39;/0/0\u0026#34;, locale: \u0026#39;en\u0026#39; }      Task 1.3 Create wallet from privateKey  We can also create wallet from privateKey. Wallet created in this way has no mnemonic property.\n1 2 3 4 5 6 7  privateKey=\u0026#39;0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d\u0026#39; wallet = new ethers.Wallet(privateKey) wallet.address //\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39; wallet.mnemonic //null       Task 2: create 20 addresses with mnemonic  We will use Ethers.js utility for HD Wallet (HDNode) to do this.\n   Task 2.1 Create HDNode instance from mnemonic  1 2 3  mnemonic=\u0026#39;myth like bonus scare over problem client lizard pioneer submit female collect\u0026#39; hdnode = ethers.utils.HDNode.fromMnemonic(mnemonic)      Task 2.2 Get 20 addresses  1 2  basepathstr = \u0026#34;m/44\u0026#39;/60\u0026#39;/0\u0026#39;/0/\u0026#34; for(i=0;i\u0026lt;20;i++){console.log(hdnode.derivePath(basepathstr+i.toString()).address)}   result:\n0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1 0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0 0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b ...... The first is with path: \u0026ldquo;m/44'/60'/0'/0/0\u0026rdquo; The second is with path: \u0026ldquo;m/44'/60'/0'/0/1\u0026rdquo; The third is with path: \u0026ldquo;m/44'/60'/0'/0/2\u0026rdquo;\n   Task 2.3 Get address with path  We can also get wallet address with path.\n1 2 3 4 5  mnemonic=\u0026#39;myth like bonus scare over problem client lizard pioneer submit female collect\u0026#39; wallet = ethers.Wallet.fromMnemonic(mnemonic,\u0026#34;m/44\u0026#39;/60\u0026#39;/0\u0026#39;/0/1\u0026#34;) wallet.address //\u0026#39;0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0\u0026#39;       Task 3: Sign message with wallet     Task 3.1: Prepare wallet as a signer  1 2  mnemonic=\u0026#39;myth like bonus scare over problem client lizard pioneer submit female collect\u0026#39; wallet = ethers.Wallet.fromMnemonic(mnemonic,\u0026#34;m/44\u0026#39;/60\u0026#39;/0\u0026#39;/0/1\u0026#34;)      Task 3.2: sign message  1 2 3  message = \u0026#34;solidity-class\u0026#34; sig = await wallet.signMessage(message) //\u0026#39;0x8637dce5aeb0b9bd9ee8ce909252806ede88eebc3789436f8f569dd1e45f3f2b47e6633d4119c26917e4b2e08c422028df2209a8ca401f77d4aab9f24b6a40831b\u0026#39;   The signature is result to signing: \u0026ldquo;\\x19Ethereum Signed Message:\\n\u0026rdquo; + message.length + message. Ethers.js docs explains:\n A signed message is prefixd with \u0026ldquo;\\x19Ethereum Signed Message:\\n\u0026rdquo; and the length of the message, using the hashMessage method, so that it is EIP-191 compliant. If recovering the address in Solidity, this prefix will be required to create a matching hash.\n    Task 3.3: verify message  1 2  ethers.utils.verifyMessage(message,sig) //\u0026#39;0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0\u0026#39;      Task 3.4: sign message hash  We can hash the message by ourselves and sign messagehash instead. We got the same signature.\n1 2 3  messageHash= ethers.utils.hashMessage(message) sig = await wallet.signMessage(messageHash) //\u0026#39;0xfc40fcec036bd4501ce3bfaf991d561553db6d3601702f8abed9f733eab31a5246163711f71ad48b002ddf83c7cd93656047759ab8e2ff4420c59d5845680ca11b\u0026#39;      Task 3.5 Understanding signature  Get the r,s,v of the signature which is r+s+v.\n1 2 3  const r = sig.slice(0, 66); const s = \u0026#39;0x\u0026#39; + sig.slice(66, 130); const v = \u0026#39;0x\u0026#39; + sig.slice(130, 132);       Task 4: Send transaction from wallet     Task 4.1 Create wallet  1 2 3 4 5 6 7 8 9  // get wallet account not in hardhat default privateKey=\u0026#39;0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d\u0026#39; wallet = new ethers.Wallet(privateKey) wallet.address //\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39;  wallet.provider //null      Task 4.2 send ethers from account 0 to test account  You can send Test Ethers to test wallet address for gas fee usage using MetaMask.\nOr you can do it in the console as we do in previous part of this tutorial:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  signer = await ethers.provider.getSigner() send_address = await signer.getAddress() to_address = wallet.address nonce = await signer.getTransactionCount() gas_price = await signer.getGasPrice() gas_limit = ethers.utils.hexlify(21000) value = ethers.utils.parseUnits(\u0026#39;100.0\u0026#39;) tx = { from: send_address, to: to_address, value: value, nonce: nonce, gasLimit: gas_limit, gasPrice: gas_price, } await signer.sendTransaction(tx) await ethers.provider.getBalance(wallet.address).then(result=\u0026gt;ethers.utils.formatEther(result)) //\u0026#39;100.0\u0026#39;      Task 4.3 Try to send from wallet wrongly  Let us try to call sendTransaction from signer which is different with the send_address.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  send_address = wallet.address to_address = await signer.getAddress() nonce = await signer.getTransactionCount() gas_price = await signer.getGasPrice() gas_limit = ethers.utils.hexlify(21000) value = ethers.utils.parseUnits(\u0026#39;1.0\u0026#39;) tx = { from: send_address, to: to_address, value: value, nonce: nonce, gasLimit: gas_limit, gasPrice: gas_price, } await signer.sendTransaction(tx)   We got an Error: \u0026ldquo;Error: from address mismatch\u0026rdquo;.\n   Task 4.4 Send from wallet - connect wallet to get signer  First, connect wallet to provider. The return of connect() is the wallet instance which can be a signer.\n1 2 3  walletsigner = await wallet.connect(ethers.provider) walletsigner.address //\u0026#39;0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\u0026#39;      Task 4.4 Send ETH using wallet as a signer  Second, sendTransaction with walletsigner:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  to_address = await signer.getAddress() nonce = await walletsigner.getTransactionCount() gas_price = await signer.getGasPrice() gas_limit = ethers.utils.hexlify(21000) value = ethers.utils.parseUnits(\u0026#39;1.0\u0026#39;) tx = { from: send_address, to: to_address, value: value, nonce: nonce, gasLimit: gas_limit, gasPrice: gas_price, } await walletsigner.sendTransaction(tx) await ethers.provider.getBalance(wallet.address).then(result=\u0026gt;ethers.utils.formatEther(result)) //\u0026#39;98.999968220292873\u0026#39;    If you find this note useful, please follow my twitter @fjun99.\n ","date":"Jan 31","permalink":"https://dev.portalsindex.xyz/posts/02-understanding-blockchain-with-ethersjs-4-tasks-of-wallet-nn5/","tags":["blockchain"," web3"," ethersjs"," dapp"],"title":"02 Understanding Blockchain with ethersjs 4 Tasks of wallet"},{"categories":null,"contents":"As a web3 developer, you can play with Ethereum blockchain using Ethers.js to get a deeper understanding. This 3-parts tutorial lists 12 tasks for you.\nEthers.js is a Javascript API for Ethereum blockchain which can work with Mainnet, testnet such as Ropsten, Rinkeby, local testnet, Layer 2 and sidechains.\nWe will use Hardhat Ethereum development environment to set up a playground as it can provide all the components we need:\n local testnet: Hardhat Network based on @ethereumjs/vm interactive console: Hardhat console solidity development tools: Hardhat ethers.js: Ethereum Javascript API  Hardhat brings in ethers.js with plugin hardhat-ethers.\nEthers.js documents: https://docs.ethers.io/v5/\n    Task 1: Setup ethers.js playground with Hardhat  You need to have node.js and yarn installed in your computer.\n   Task 1.1 Install Hardhat  Run in command line:\nmkdir playeth \u0026amp;\u0026amp; cd playeth yarn add hardhat    Task 1.2 Init Hardhat project  You can init a Hardhat project by running:\nyarn hardhat Choose Option \u0026ldquo;Create an advanced sample project that uses TypeScript\u0026rdquo;. A sample hardhat project will be created.\n   Task 1.3 Run a stand-alone local testnet  In another terminal, run a stand-alone local testnet \u0026ldquo;Hardhat Network\u0026rdquo; by running:\nyarn hardhat node More about in-process and stand-alone mode of Hardhat Network can be found here.\n   Task 1.4 Enter Hardhat console  Run Hardhat console connecting to blockchain testnet localhost:\nyarn hardhat console --network localhost Check ethers.js version and get the current blocknumber in console:\n1 2 3 4 5  ethers.version //\u0026#39;ethers/5.5.3\u0026#39;  await ethers.provider.getBlockNumber() //0   Now, you have an ethers.js playground with an interactive console and a local testnet.\n    Task 2: Have a look at blockchain  Currently Hardhat console is connected to a local blockchain testnet at http://localhost:8545. Let\u0026rsquo;s have a look at the blockchain with Ethers.js.\nEthers.js provide \u0026ldquo;Provider\u0026rdquo; and \u0026ldquo;Signer\u0026rdquo; for interaction with blockchain. Its document explains:\n  A Provider in ethers is a read-only abstraction to access the blockchain data.\n  A Signer in ethers is an abstraction of an Ethereum Account, which can be used to sign messages and transactions and send signed transactions to the Ethereum Network to execute state changing operations.\n     Task 2.1 check connection  We can access provider ether.provider,a ethers.js wrapped Ethereum RPC provider.\n1 2 3  const provider = ethers.provider ethers.provider.connection // { url: \u0026#39;http://localhost:8545\u0026#39; }      Task 2.2 check network of provider  1 2  await provider.getNetwork() //{ chainId: 31337, name: \u0026#39;unknown\u0026#39; }   Ethereum network with chainId 31337 is local testnet at 127.0.0.1:8545.\n   Task 2.3 get signer  The big diffence between ethers.js and web3.js is that it seperate signer from provider. Provider can only read data from blockchain while signer can send transactions to change data on blockchain. Ethers.js docs explain signer:\n1 2 3 4 5  const signer = await provider.getSigner() //this is a JsonRpcSigner  await signer.getAddress() //\u0026#39;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\u0026#39;      Task 2.4 get all the accounts with Hardhat console  Hardhat console is running with 20 test accounts.\n1 2 3 4 5 6 7 8 9 10 11 12  accounts = await ethers.getSigners(); accounts.length //20  for (const account of accounts) console.log(account.address) Result: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC 0x90F79bf6EB2c4f870365E785982E1f101E93b906 ...   There is a sample hardhat plugin accounts, you can run it in command line:\nyarn hardhat accounts     Task 3: Get ETH balance of an address  We can use getBalance() to get ETH balance of an address (reference link). Since we only need to read data from blockchain, we will use provider instead of signer.\n   Task 3.1 getBalance  1 2 3  firstaddress = accounts[0].address balance = await provider.getBalance(firstaddress) //BigNumber { value: \u0026#34;10000000000000000000000\u0026#34; }   The return result is BigNumber, which means 10000.0 ethers. Every accountshave 10000.0 test ethers in Hardhat local testnet.\n   Task 3.2 formatEther  We can use ethers.js utilities for Display Logic and Input to display it in a friendly manner.\n1 2  ethers.utils.formatEther(balance) //\u0026#39;10000.0\u0026#39;      Task 3.3 parseEther  We can also transfer from string to Bignumber easily.\n1 2  ethers.utils.parseEther(\u0026#34;0.5\u0026#34;); //BigNumber { value: \u0026#34;500000000000000000\u0026#34; }       Task 4: Send ETH from one address to another     Task 4.1 Send ETH using MetaMask  You can use MetaMask to transfer test ethers between accounts:\n Switch network to Localhost8545 in MetaMask Import account #0 with privateKey Transfer 100 test ETH from Account #0 to Account #1  1 2 3  Accounts #0: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 privateKey: 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 Accounts #1: 0x70997970C51812dc3A010C7d01b50e0d17dc79C8   Address #00 and privateKey to add account to MetaMask. Address #1 is the receiver.\nNote: Remember to change chainId from \u0026ldquo;1337\u0026rdquo; to \u0026ldquo;31337\u0026rdquo; in MetaMask network setting.\nYou can check the results in console:\n1 2 3 4  provider = ethers.provider acccount_1=\u0026#39;0x70997970C51812dc3A010C7d01b50e0d17dc79C8\u0026#39; await provider.getBalance(acccount_1).then((r)=\u0026gt;console.log(ethers.utils.formatEther(r))) //\u0026#39;10100.0\u0026#39;   Send ETH from one address to another can be done by call sendTransaction using Ethers.js. Related Ether.js docs is here.\nDetailed explanation of Transaction can be found in Andreas M. Antonopoulos\u0026rsquo;s book Mastering Etereum Chapter 6 Transactions.\n   Task 4.2 Prepare for sendTransaction  1 2 3 4 5 6 7 8 9 10 11  signer = await ethers.provider.getSigner() send_address = await signer.getAddress() accounts = await ethers.getSigners(); to_address = accounts[1].address nonce = await signer.getTransactionCount() gas_price = await signer.getGasPrice() gas_limit = ethers.utils.hexlify(21000) value = ethers.utils.parseUnits(\u0026#39;100.0\u0026#39;)      Task 4.3 Format transaction  1 2 3 4 5 6 7 8  tx = { from: send_address, to: to_address, value: value, nonce: nonce, gasLimit: gas_limit, gasPrice: gas_price, }      Task 4.4 Call \u0026lt;code\u0026gt;sendTransaction\u0026lt;/code\u0026gt;  Send transaction:\n1  await signer.sendTransaction(tx)      Task 4.5 Check results  1 2 3 4 5  provider = ethers.provider await provider.getBalance(to_address).then((r)=\u0026gt;console.log(ethers.utils.formatEther(r))) //\u0026#39;10200.0\u0026#39; await provider.getBalance(send_address).then((r)=\u0026gt;console.log(ethers.utils.formatEther(r))) //\u0026#39;9799.999923543659375\u0026#39;   The balance of send_address is a little less than 9800.0 because it paid some ether as gas fee for the transactions.\nWhen sendTransaction called, it returns receipt of the transaction executed on the blockchain.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  { hash: \u0026#39;0x8915f9df88e4f2af2eefe05922e026c66723678b7df3de11e525a03c11b391a2\u0026#39;, type: 0, accessList: null, blockHash: \u0026#39;0xfae5411b597d02b1c36a6842f14db5aad7ac2b974474f06355bd1b4eb5d438ed\u0026#39;, blockNumber: 1, transactionIndex: 0, confirmations: 1, from: \u0026#39;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\u0026#39;, gasPrice: BigNumber { value: \u0026#34;1875000000\u0026#34; }, gasLimit: BigNumber { value: \u0026#34;135168\u0026#34; }, to: \u0026#39;0x70997970C51812dc3A010C7d01b50e0d17dc79C8\u0026#39;, value: BigNumber { value: \u0026#34;100000000000000000000\u0026#34; }, nonce: 0, data: \u0026#39;0x\u0026#39;, r: \u0026#39;0x116a4e2acba174b04a6f44248fef0170012d956d20e03d93b1b3368fce09c8e8\u0026#39;, s: \u0026#39;0x14f1104a1fa98fed53a06a4a7a6464503d1f8a822191c022a2180e45c258809b\u0026#39;, v: 62710, creates: null, chainId: 31337, wait: [Function (anonymous)] }   You can also have a look at the termial running yarn hardhat node. Transaction details are logged on the screen:\n Transaction: 0x8915f9df88e4f2af2eefe05922e026c66723678b7df3de11e525a03c11b391a2 From: 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 To: 0x70997970c51812dc3a010c7d01b50e0d17dc79c8 Value: 100 ETH Gas used: 21000 of 135168 Block #1: 0xfae5411b597d02b1c36a6842f14db5aad7ac2b974474f06355bd1b4eb5d438ed  If you find this note useful, please follow my twitter @fjun99.\n ","date":"Jan 31","permalink":"https://dev.portalsindex.xyz/posts/01-understanding-blockchain-with-ethersjs-4-tasks-of-basics-and-transfer-5d17/","tags":["blockchain"," web3"," ethersjs"," dapp"],"title":"01 Understanding Blockchain with ethersjs 4 Tasks of Basics and Transfer"},{"categories":null,"contents":"   Day 2 of #100DaysOfCode started with\u0026amp;hellip;  refresh my PHP knowledge. I made the documentation / wiki of the DiscordCustomRPC.py repository a little more understandable. I also updated the Python rewrite of the AntiScamBot backend, but it\u0026rsquo;s not yet merged.\n","date":"Jan 31","permalink":"https://dev.portalsindex.xyz/posts/2-day-100-days-of-code-446c/","tags":["100daysofcode"," python"," opensource"],"title":"2 Day of 100 Days of Code"},{"categories":null,"contents":"If you\u0026rsquo;re like me then you prefer to do everything on the computer without touching the mouse. It\u0026rsquo;s almost like a game sometimes. How can I open this program or browse this webpage without needing to lift my hands off of the keyboard? More specifically, how can I keep my fingers on the wasdf-jkli keys while navigating? Afterall, lifting my hand up to reach for the arrow keys is almost the same distance away as my mouse is. Too much effort!\nIf you resonate with any of what I just said, this article is for you.\n   1: \u0026lt;a href=\u0026#34;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb\u0026#34;\u0026gt;Install Vimium\u0026lt;/a\u0026gt;  Vimium is a google chrome extension that allows you to browse the web with much more control than normal.\nModern web pages are being designed with more and more accessibility features, such as built in tab-indexing, but it can still feel exhausting to have to cycle through every indexed element on the page to finally reach the one you want. I always overshoot it and have to shift tab another thirteen times to get back to where you want to be\u0026hellip;\nEnter Vimium\nNow you can easily scroll up and down on most pages using just the \u0026lsquo;j\u0026rsquo; and \u0026lsquo;k\u0026rsquo; keys and you can quickly access most elements of the page by pressing \u0026lsquo;f\u0026rsquo; then typing the corresponding tags. Instead of using ctrl+F you can simply press the \u0026lsquo;/\u0026rsquo; slash key to insert your cursor at any text you search for.\n   2: Rebind your arrow keys to your \u0026amp;lsquo;j k l i\u0026amp;rsquo; keys using \u0026lt;a href=\u0026#34;https://www.autohotkey.com/\u0026#34;\u0026gt;AutoHotkey\u0026lt;/a\u0026gt;  Control your cursor with Capslock + j k l i instead of your arrow keys. Trust me you don\u0026rsquo;t need Capslock. You\u0026rsquo;re not obnoxious are you? Just hold down shift.\nYou\u0026rsquo;ll need to first download \u0026amp; install AutoHotkey and write a script to remap your keyboard a little. Create a script file with the extension .ahk and copy and paste the following code\n#NoEnv ; Recommended for performance and compatibility with future AutoHotkey releases. ; #Warn ; Enable warnings to assist with detecting common errors. SendMode Input ; Recommended for new scripts due to its superior speed and reliability. SetWorkingDir %A_ScriptDir% ; Ensures a consistent starting directory. SetCapsLockState, AlwaysOff CapsLock \u0026amp; j::Send, {blind}{Left} CapsLock \u0026amp; k::Send, {blind}{Down} CapsLock \u0026amp; l::Send, {blind}{Right} CapsLock \u0026amp; i::Send, {blind}{Up} CapsLock \u0026amp; h::Send, {blind}{Backspace} I found this code from the following blog by a programmer named Nikita: https://tonsky.me/blog/cursor-keys/ that explains why your cursor keys belong in the middle of your keyboard. Simply open up cmd and run the script from the directory you saved it in.\nAlternatively you can right click the script and select run. Pausing the script is done in the same manner.\nCombined with Vimium you should now be browsing the internet and shuffling your cursor around your code at the speed of\u0026hellip; your fingers? Anyways it\u0026rsquo;s faster than lifting your hands off the keyboard. There is one more thing you can do to speed up your productivity.\n   3: Enable caret browsing  I almost spelled that \u0026lsquo;carrot\u0026rsquo; instead. Anyone could make that mistake so don\u0026rsquo;t judge me! Simply press F7 on Windows 10 to enable caret browsing.\nThis makes copy paste scenarios faster and more satisfying.\nThanks for reading my 3 step process to speeding up your workflow. If you have any other \u0026lsquo;power user\u0026rsquo; suggestions feel free to leave a comment.\nIf you enjoyed this article please leave a like.\n","date":"Jan 31","permalink":"https://dev.portalsindex.xyz/posts/3-simple-steps-to-increase-speed-efficiency-while-working-browsing-42n0/","tags":["programming"," webdev"," beginners"," productivity"],"title":"3 Simple steps to increase speed  efficiency while working  browsing"},{"categories":null,"contents":"If you desire to code but have no plan on how to get started then this article is for you. Desiring to code is one thing and being consistent about it is another thing. Most beginners give up when things start to go south. Welcome to anythingprogramming.com, in this article I will list some guides that will help you to stay on track without burning out.\nWhy Do You Desire To Code?\nThe answer to this question might be challenging to figure out. Some see coding as nothing other than sitting in front of your computer to code others derive their passion from others.\nDeriving passion from people isn’t bad but the question you have to ask yourself is can I hold on to this passion for long? Do I even understand this passion?\n** Are Three months enough to Get Started?**\nWith consistency and plan, three months will be too much. If you dedicate an hour a day to study continuously without any interruption you will be able to build basic systems or applications.\nThe most difficult aspect is to get started. You will not be good at coding overnight but with a little bit of dedication and discipline, you will be doing well by watching tutorials videos, reading extensively and noting points.\nWays To Learn To Code Within Three Months\n** 1. Read Books**\nThere are millions of coding books out there to support you in your coding journey. Note, reading these books will not make you a good programmer but if you practice what is written in the book over time, you will be doing well.\n2 Sign-Up For Bootcamp There are alternatives to this by pursuing a computer science degree. Sign-up to boot camp helps you to be in alignment whiles you make friends with people who have the same interest as you do. Bootcamp shortens the learning curves by giving you the right information which is needed to get started.\nGet Mentor  A mentor is someone who will hold your hands and help you when you are need it. Mentors’ advice helps you think broadly, they also make you aware of what you might be facing in the industry.\nConclusion\nIt is possible to learn coding within three months or less if you follow the above-listed information. Share this post if you find it informative and educating.\nThank You.\n","date":"Jan 24","permalink":"https://dev.portalsindex.xyz/posts/3-ways-to-learn-coding-within-three-months-enb/","tags":["javascript"," beginners"," programming"," career"],"title":"3 Ways To Learn Coding Within Three Months"},{"categories":null,"contents":"A few months ago, my manager asked me if I\u0026rsquo;d like to facilitate some technical interviews. My answer was hell yeah!\nI think it\u0026rsquo;s great that management involves senior developers in the selection process. On the one hand, it\u0026rsquo;s good for the team if they know that someone who is hands-on with the code saw the new colleague, talked to him/her and asked - hopefully - relevant questions. On the other hand, it\u0026rsquo;s also reassuring for the candidates that they can talk to someone who is doing the same job as he would.\nDuring these few months, I conducted a couple of interviews, both with junior and senior people and I\u0026rsquo;d like to share some pieces of advice - mostly for developers with little experience.\n   Your CV vs reality  My first job was a non-developer job at a small company dealing with municipalities. I was called a project manager, that was my official title. I was thinking to put that on my CV.\nBut it felt better to simply write project coordinator on the resume. It\u0026rsquo;s less fancy and it creates fewer expectations. Later, with more experience in the bag, I changed the title back to project manager.\nWhy do I tell this?\nEven though the role of your resume is to let you pass the screening and get you an interview, it\u0026rsquo;s not as simple as that.\nYour CV shouldn\u0026rsquo;t harm you during the interviews!\nTailor your CV for each position. In small startups, sometimes the person with the most experience gets the catchy title of a CTO. Even if that \u0026ldquo;most experience\u0026rdquo; is just an extra couple of months. Now, if you communicate that you are a CTO - even at a small startup - and you apply for a (junior) developer job, you\u0026rsquo;ll meet high(er) expectations compared to if you would have just written that you are a developer at that startup.\nAnother bad habit people are prone to during the beginning of their career is skill stacking on the CV. If you list 10 different technologies you\u0026rsquo;re proficient with after 1-2 years of work, it\u0026rsquo;s hard to assume that it\u0026rsquo;s realistic.\nI wouldn\u0026rsquo;t realistically expect it even from someone with 10 years of experience.\nI had a look at my CV while writing these lines, and I also have 10 skills listed as advanced after being on the market for 12 years. Yet, almost half of them are about the same technology:\n C++ with a version number, meaning that I\u0026rsquo;m up-to-date with up until that version\u0026rsquo;s features, the C++ STL, meaning that I\u0026rsquo;m comfortable with the standard template library, and 2 more C++ test frameworks, gTest and gMock.  In case you mention that you worked as an instructor, know at least the basics of what you taught. You don\u0026rsquo;t have to know all the advanced things of that technology, but you must know the basics pretty well.\nIf you already forgot what you taught and you wouldn\u0026rsquo;t be able to explain those concepts again, maybe it\u0026rsquo;s better not to list yourself as an instructor. Or only mention it if the technology is not relevant for the job you applied for. But even that has its own dangers. Assume that you\u0026rsquo;ll meet someone who will ask about those topics that you thought.\n   Admit that you don\u0026amp;rsquo;t know  Speaking about not knowing things\u0026hellip; It\u0026rsquo;s perfectly fine not to know answers to all the questions.\nJust admit that you don\u0026rsquo;t have the answer to a given question.\nWe all have to look things up, we all - should - learn every day. I learnt C++ syntax a couple of months ago from one of our fresh grads. And I was more than happy about it!\nBut don\u0026rsquo;t just say something hoping that it will be the right answer. An interview is not a university test where you should throw a dice hoping that you might get it right and get the extra point.\nIn any case, most interviewers will catch it if you just try your chance.\nThe more complex the question, the more true this is. Throwing in whatever technology as an answer for an architectural question will never work.\nInterviewers don\u0026rsquo;t care whether you\u0026rsquo;d use docker or another technology for scaling up a service. They, we are interested in how you think and what kind of issues, contradictions you expect to encounter during the design and implementation of a scalable system.\nLet me give you an example. While we were scaling an application, we started to add new application servers, but at a point, this meant that more and more database connections were opened to the single database server and it couldn\u0026rsquo;t cope with it.\nDescribing such a situation doesn\u0026rsquo;t require any technology.\n   Some concepts you just have to learn  So far we discussed a couple of things to pay attention to when you write your CV and also to admit when you don\u0026rsquo;t know the answer to a question.\nThere is one last thing, I want to share in this article.\nMany questions, many topics are technology dependent.\nYou don\u0026rsquo;t really care or know about gMock or gTest if you are a React developer.\nYou don\u0026rsquo;t care about Angular or React when all what you do is touching backend services serving hundreds of transactions (or more) per second.\nBut you should care about concepts that are useful everywhere in IT.\nSome evergreen concepts you should learn about:\n Unit testing Automated testing in general How to write clean code Refactoring SOLID design principles Data structures A bit of algorithms  I don\u0026rsquo;t say that you should know everything nor that this is an exhaustive list or that data structures and algorithms have the same importance at the frontend and at the backend world. Though knowing some basics won\u0026rsquo;t hurt.\nObviously, you cannot learn everything at once and you don\u0026rsquo;t have to. The best thing you can do - in my opinion - is to read a few pages every day and practice. Here are a couple of books that helped me a lot.\n   Conclusion  In this article, I shared a couple of things, mostly inexperienced developers do when they apply for a job.\nI think you can seriously increase your chances if you don\u0026rsquo;t try to suggest something in your CV that is not true.\nDefinitely, you should admit when you don\u0026rsquo;t the answer to a question!\nBut I think the most important is to keep learning every day and start with concepts that will be useful for you wherever you go.\n   Connect deeper  If you liked this article, please\n hit on the like button, subscribe to my newsletter and let\u0026rsquo;s connect on Twitter!  ","date":"Jan 23","permalink":"https://dev.portalsindex.xyz/posts/3-piece-of-advice-for-junior-developers-6gg/","tags":["beginners"," interview"," career"],"title":"3 piece of advice for junior developers"},{"categories":null,"contents":"I have been discussing many topics in my blog but it’s time to start from the root once again. In this blog and upcoming few we’ll discuss how to attempt general competitive programming questions, no fancy data structures or algorithms, but thinking outside the box and cooking up some good enough solutions together.\n Understanding how code works is more important than coding an app, Understanding how your own thoughts work is even more important.\n    \u0026lt;strong\u0026gt;Imaginary problem time:\u0026lt;/strong\u0026gt;   Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nYou must write an algorithm that runs in _O(n)_ time and without using the division operation.\n Looks simple at the surface but digging in, we’ll find many good concepts. Don’t know if it\u0026rsquo;s the right info or not, but leetcode says it was asked in these big shot interviews (Yeah! We can’t even guess which company names are blurred here, LOL!). 😅\n   \u0026lt;strong\u0026gt;Solution time\u0026lt;/strong\u0026gt;  nums = [1, 2, 3, 4]\nHere, we need to find the product of all numbers except self and return results in an array. Easy-peezy!\n 2*3*4 = 24 1*3*4 = 12 1*2*4 = 8 1*2*3 = 6  Result: [24, 12, 8, 6]\n   \u0026lt;strong\u0026gt;Algorithm\u0026lt;/strong\u0026gt;  Loop through nums and find product of all elements on left side and elements on right side. It may sound simple but is important to know how we reached to this very solution among all possibilities.\n   Implementation and Discussion  =============================\n   \u0026lt;strong\u0026gt;Greedy way\u0026lt;/strong\u0026gt;  The most tempting way to solve such a problem will be to take the product of the entire array and divide it by the element for which we need the value. Like: If we need value for b then: (a*b*c*d) / b = a*c*d , this is exactly we want for element b, right? Everything except b.\nThis bubble will burst out when we need to consider a case when b is 0.\nInput: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0] In above case our logic will surely fail with result: [0, 0, Infinity, 0, 0].\n   \u0026lt;strong\u0026gt;Rookie Ninja Way\u0026lt;/strong\u0026gt;  A ninja always takes edge cases in consideration. One simple and stupid way to get it done is take product of all numbers on left side and multiply with products of all numbers on right side, giving product of all numbers except self: product([-1, 1] ) * product([-3,3]). This solution will work for all cases, but one BIG problem ahead: Product is a heavy operation in itself and doing it for say 10,000 elements in the array, then it will result in O(n²) complexity and you’ll fail the test even after being a ninja.\n   \u0026lt;strong\u0026gt;Ultimate Ninja Way\u0026lt;/strong\u0026gt;  One beautiful way to do multiplication in such a case is this sweet algorithm: Product till n-th element is product till (n-1)th element * nth element. Earlier, we had to multiply all elements of the array except to get that value, but now we take product till that number and just multiply itself. Done and dusted in 1 operation, where n operations were needed. This will take care of our left side product.\nA small modification will take care of the right side as well. We start from the right end of the array, unlike the left product where we had to start from the left side, kinda intuitive! One catch in my implementation is the reversal of the right products to bring it in the same order as the left one, remember we filled the right products array in the opposite way.\nExample: [1,2,3,4,5,6,7,8]\nFor 4:\nLeft product: (Already calcalated product for [1, 2]) * 3 = 6\nRight product: (Already calcalated product for [6, 7, 8]) * 5= 1680\n   \u0026lt;strong\u0026gt;Code\u0026lt;/strong\u0026gt;  (https://github.com/sameer1612/CP-Solutions/blob/main/product_of_array_except_self.py)\n   \u0026lt;strong\u0026gt;Conclusion\u0026lt;/strong\u0026gt;  This is a totally new area of discussion with you folks but no matter how many fancy technologies we touch or roles we cherish, we are coders and we code solutions to problems around us. I’ll like to write more of such blogs, maybe once a week if you like, do let me know.\n   To Connect  ==========\n🏭 LinkedIn: https://www.linkedin.com/in/sameerkumar1612\n/ 🏠 Website: https://hi-sameer.web.app\n","date":"Jan 22","permalink":"https://dev.portalsindex.xyz/posts/01-product-of-array-except-self-20ak/","tags":["algorithms"," codenewbie"," tutorial"," computerscience"],"title":"01 Product of Array Except Self"},{"categories":null,"contents":"1  const reverseWords = (str) =\u0026gt; str.split(\u0026#34; \u0026#34;).map((word) =\u0026gt; [...word].reverse().join(\u0026#34;\u0026#34;)).join(\u0026#34;\u0026#34;);   Returns the string with all words reversed\n    Improved version with unicode support  1  const reverseWords = (str) =\u0026gt; str.replace(/(\\p{L}+)/gu, (word) =\u0026gt; [...word].reverse().join(\u0026#39;\u0026#39;));       The repository and npm package  You can find the all the utility functions from this series at github.com/martinkr/onelinecode The library is also published to npm as @onelinecode for your convenience.\nThe code and the npm package will be updated every time I publish a new article.\n Follow me on Twitter: @martinkr and consider to buy me a coffee\nPhoto by zoo_monkey on Unsplash\n \n ","date":"Jan 19","permalink":"https://dev.portalsindex.xyz/posts/1-line-of-code-how-to-reverse-all-words-of-a-string-n26/","tags":["javascript"," webdev"," productivity"," codequality"],"title":"1 line of code How to reverse all words of a string"},{"categories":null,"contents":"1  const reverseString = str =\u0026gt; [...str].reverse().join(\u0026#34;\u0026#34;);   Returns the reversed string.\n    The repository \u0026amp;amp; npm package  You can find the all the utility functions from this series at github.com/martinkr/onelinecode The library is also published to npm as @onelinecode for your convenience.\nThe code and the npm package will be updated every time I publish a new article.\n Follow me on Twitter: @martinkr and consider to buy me a coffee\nPhoto by zoo_monkey on Unsplash\n \n ","date":"Jan 19","permalink":"https://dev.portalsindex.xyz/posts/1-line-of-code-how-to-reverse-a-string-2pga/","tags":["javascript"," webdev"," productivity"," codequality"],"title":"1 line of code How to reverse a string"}]